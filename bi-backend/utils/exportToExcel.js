import ExcelJS from 'exceljs';
import path from 'path';
import fs from 'fs';

class ExcelExporter {
  constructor() {
    this.defaultOptions = {
      sheetName: 'Report',
      headerStyle: {
        font: { bold: true, color: { argb: 'FFFFFF' } },
        fill: { type: 'pattern', pattern: 'solid', fgColor: { argb: '366092' } },
        alignment: { horizontal: 'center', vertical: 'middle' }
      },
      dataStyle: {
        font: { size: 11 },
        alignment: { horizontal: 'left', vertical: 'middle' },
        border: {
          top: { style: 'thin', color: { argb: 'CCCCCC' } },
          left: { style: 'thin', color: { argb: 'CCCCCC' } },
          bottom: { style: 'thin', color: { argb: 'CCCCCC' } },
          right: { style: 'thin', color: { argb: 'CCCCCC' } }
        }
      }
    };
  }

  async convertToExcel(data, options = {}) {
    const config = { ...this.defaultOptions, ...options };
    const workbook = new ExcelJS.Workbook();
    
    // Set workbook properties
    workbook.creator = 'ERP BI Analytics System';
    workbook.lastModifiedBy = 'BI Analytics System';
    workbook.created = new Date();
    workbook.modified = new Date();
    workbook.subject = options.subject || 'Generated Report';
    workbook.title = options.title || 'Report';

    // Create worksheet
    const worksheet = workbook.addWorksheet(config.sheetName);

    // Add metadata
    this.addMetadata(worksheet, data, config);

    // Add data based on type
    if (data.data && Array.isArray(data.data)) {
      this.addTableData(worksheet, data.data, config);
    } else if (Array.isArray(data)) {
      this.addTableData(worksheet, data, config);
    } else {
      this.addObjectData(worksheet, data, config);
    }

    // Auto-fit columns
    this.autoFitColumns(worksheet);

    // Generate buffer
    const buffer = await workbook.xlsx.writeBuffer();
    return buffer;
  }

  addMetadata(worksheet, data, config) {
    const { title, reportType, generatedAt } = data;
    
    // Add title
    if (title) {
      const titleRow = worksheet.addRow([title]);
      titleRow.getCell(1).font = { bold: true, size: 16 };
      titleRow.height = 25;
    }

    // Add metadata
    const metadataRows = [
      ['Report Type', reportType || 'N/A'],
      ['Generated', generatedAt ? new Date(generatedAt).toLocaleString() : new Date().toLocaleString()],
      ['Generated By', 'ERP BI Analytics System']
    ];

    metadataRows.forEach(([key, value]) => {
      const row = worksheet.addRow([key, value]);
      row.getCell(1).font = { bold: true };
      row.getCell(2).font = { italic: true };
    });

    // Add empty row
    worksheet.addRow([]);
  }

  addTableData(worksheet, data, config) {
    if (data.length === 0) {
      worksheet.addRow(['No data available']);
      return;
    }

    // Get headers from first row
    const headers = Object.keys(data[0]);
    
    // Add headers
    const headerRow = worksheet.addRow(headers);
    headerRow.eachCell((cell, colNumber) => {
      cell.style = config.headerStyle;
    });

    // Add data rows
    data.forEach(rowData => {
      const row = worksheet.addRow(headers.map(header => rowData[header] || ''));
      row.eachCell((cell, colNumber) => {
        cell.style = config.dataStyle;
        
        // Format numbers
        if (typeof cell.value === 'number') {
          cell.numFmt = '#,##0.00';
        }
      });
    });
  }

  addObjectData(worksheet, data, config) {
    const entries = Object.entries(data);
    
    entries.forEach(([key, value]) => {
      const row = worksheet.addRow([key, value]);
      row.getCell(1).font = { bold: true };
      row.getCell(2).style = config.dataStyle;
    });
  }

  autoFitColumns(worksheet) {
    worksheet.columns.forEach(column => {
      let maxLength = 0;
      
      column.eachCell({ includeEmpty: true }, (cell) => {
        const columnLength = cell.value ? cell.value.toString().length : 10;
        if (columnLength > maxLength) {
          maxLength = columnLength;
        }
      });
      
      column.width = Math.min(maxLength + 2, 50); // Cap at 50 characters
    });
  }

  // Create multiple sheets for different data types
  async createMultiSheetExcel(dataSheets, options = {}) {
    const workbook = new ExcelJS.Workbook();
    
    workbook.creator = 'ERP BI Analytics System';
    workbook.lastModifiedBy = 'BI Analytics System';
    workbook.created = new Date();
    workbook.modified = new Date();

    dataSheets.forEach(({ name, data, type = 'table' }) => {
      const worksheet = workbook.addWorksheet(name);
      
      if (type === 'table' && Array.isArray(data)) {
        this.addTableData(worksheet, data, options);
      } else if (type === 'object') {
        this.addObjectData(worksheet, data, options);
      }
      
      this.autoFitColumns(worksheet);
    });

    const buffer = await workbook.xlsx.writeBuffer();
    return buffer;
  }

  // Add charts to worksheet
  addChart(worksheet, chartData, options = {}) {
    const { chartType = 'column', dataRange, title, position = 'E2' } = options;
    
    worksheet.addChart(chartType, {
      title: { name: title },
      dataRange: dataRange,
      position: position,
      width: 400,
      height: 300
    });
  }

  // Utility method to save Excel to file
  async saveToFile(data, filename, options = {}) {
    const excelBuffer = await this.convertToExcel(data, options);
    const filePath = path.join(process.cwd(), 'exports', filename);
    
    // Ensure exports directory exists
    const exportsDir = path.dirname(filePath);
    if (!fs.existsSync(exportsDir)) {
      fs.mkdirSync(exportsDir, { recursive: true });
    }
    
    fs.writeFileSync(filePath, excelBuffer);
    return filePath;
  }

  // Create summary report with multiple sheets
  async createSummaryReport(reportData, options = {}) {
    const sheets = [
      { name: 'Summary', data: reportData.summary, type: 'object' },
      { name: 'Data', data: reportData.data, type: 'table' },
      { name: 'Charts', data: reportData.charts, type: 'object' }
    ];

    return this.createMultiSheetExcel(sheets, options);
  }
}

export default new ExcelExporter();
